See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

SpotBugs:     PASSED
PMD:          FAILED (2 warnings)
Checkstyle:   FAILED (0 errors, 2 warnings)

Correctness:  24/35 tests passed
Memory:       16/16 tests passed
Timing:       42/42 tests passed

Aggregate score: 81.14%
[Compilation: 5%, API: 5%, SpotBugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
 10K Jan  9 06:06 KdTree.java
3.6K Jan  9 06:06 PointSET.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------
KdTree.java:12: Avoid unused private instance (or static) variables, such as 'HORI'. [UnusedPrivateField]
PointSET.java:12: The private instance (or static) variable 'points' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 2 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] KdTree.java:22:9: Declare static and instance variables in order of their access modifiers: public, protected, package, and private. [DeclarationOrder]
[WARN] PointSET.java:8:8: Unused import statement for 'edu.princeton.cs.algs4.StdRandom'. [UnusedImports]
Checkstyle ends with 0 errors and 2 warnings.

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: insert n random points; check size() and isEmpty() after each insertion
        (size may be less than n because of duplicates)
  * 5 random points in a 1-by-1 grid
  * 50 random points in a 8-by-8 grid
  * 100 random points in a 16-by-16 grid
  * 1000 random points in a 128-by-128 grid
  * 5000 random points in a 1024-by-1024 grid
  * 50000 random points in a 65536-by-65536 grid
==> passed

Test 2: insert n random points; check contains() with random query points
  * 1 random points in a 1-by-1 grid
  * 10 random points in a 4-by-4 grid
  * 20 random points in a 8-by-8 grid
  * 10000 random points in a 128-by-128 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 65536-by-65536 grid
==> passed

Test 3: insert random points; check nearest() with random query points
  * 10 random points in a 4-by-4 grid
  * 15 random points in a 8-by-8 grid
  * 20 random points in a 16-by-16 grid
  * 100 random points in a 32-by-32 grid
  * 10000 random points in a 65536-by-65536 grid
==> passed

Test 4: insert random points; check range() with random query rectangles
  * 2 random points and random rectangles in a 2-by-2 grid
  * 10 random points and random rectangles in a 4-by-4 grid
  * 20 random points and random rectangles in a 8-by-8 grid
  * 100 random points and random rectangles in a 16-by-16 grid
  * 1000 random points and random rectangles in a 64-by-64 grid
  * 10000 random points and random rectangles in a 128-by-128 grid
==> passed

Test 5: call methods before inserting any points
 * size() and isEmpty()
 * contains()
 * nearest()
 * range()
==> passed

Test 6: call methods with null argument
  * insert()
  * contains()
  * range()
  * nearest()
==> passed

Test 7: check intermixed sequence of calls to insert(), isEmpty(),
        size(), contains(), range(), and nearest() with
        probabilities (p1, p2, p3, p4, p5, p6, p7), respectively
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 16-by-16 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 128-by-128 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 65536-by-65536 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
==> passed

Test 8: check that two PointSET objects can be created at the same time
==> passed


Total: 8/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 27 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt

    java.lang.NullPointerException

    KdTree.size(KdTree.java:72)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:171)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:161)
    TestKdTree.test1a(TestKdTree.java:1580)
    TestKdTree.main(TestKdTree.java:1929)

  * input1.txt

    java.lang.NullPointerException

    KdTree.size(KdTree.java:72)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:171)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:161)
    TestKdTree.test1a(TestKdTree.java:1581)
    TestKdTree.main(TestKdTree.java:1929)

  * input5.txt

    java.lang.NullPointerException

    KdTree.size(KdTree.java:72)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:171)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:161)
    TestKdTree.test1a(TestKdTree.java:1582)
    TestKdTree.main(TestKdTree.java:1929)

  * input10.txt

    java.lang.NullPointerException

    KdTree.size(KdTree.java:72)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:171)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:161)
    TestKdTree.test1a(TestKdTree.java:1583)
    TestKdTree.main(TestKdTree.java:1929)

==> FAILED

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid

    java.lang.NullPointerException

    KdTree.size(KdTree.java:72)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:171)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1b(TestKdTree.java:1590)
    TestKdTree.main(TestKdTree.java:1932)

  * 5 random non-degenerate points in a 8-by-8 grid

    java.lang.NullPointerException

    KdTree.size(KdTree.java:72)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:171)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1b(TestKdTree.java:1591)
    TestKdTree.main(TestKdTree.java:1932)

  * 10 random non-degenerate points in a 16-by-16 grid

    java.lang.NullPointerException

    KdTree.size(KdTree.java:72)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:171)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1b(TestKdTree.java:1592)
    TestKdTree.main(TestKdTree.java:1932)

  * 50 random non-degenerate points in a 128-by-128 grid

    java.lang.NullPointerException

    KdTree.size(KdTree.java:72)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:171)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1b(TestKdTree.java:1593)
    TestKdTree.main(TestKdTree.java:1932)

  * 500 random non-degenerate points in a 1024-by-1024 grid

    java.lang.NullPointerException

    KdTree.size(KdTree.java:72)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:171)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1b(TestKdTree.java:1594)
    TestKdTree.main(TestKdTree.java:1932)

  * 50000 random non-degenerate points in a 65536-by-65536 grid

    java.lang.NullPointerException

    KdTree.size(KdTree.java:72)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:171)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1b(TestKdTree.java:1595)
    TestKdTree.main(TestKdTree.java:1932)

==> FAILED

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid

    java.lang.NullPointerException

    KdTree.size(KdTree.java:72)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:171)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1c(TestKdTree.java:1602)
    TestKdTree.main(TestKdTree.java:1935)

  * 10 random distinct points in a 8-by-8 grid

    java.lang.NullPointerException

    KdTree.size(KdTree.java:72)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:171)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1c(TestKdTree.java:1603)
    TestKdTree.main(TestKdTree.java:1935)

  * 20 random distinct points in a 16-by-16 grid

    java.lang.NullPointerException

    KdTree.size(KdTree.java:72)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:171)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1c(TestKdTree.java:1604)
    TestKdTree.main(TestKdTree.java:1935)

  * 10000 random distinct points in a 128-by-128 grid

    java.lang.NullPointerException

    KdTree.size(KdTree.java:72)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:171)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1c(TestKdTree.java:1605)
    TestKdTree.main(TestKdTree.java:1935)

  * 100000 random distinct points in a 1024-by-1024 grid

    java.lang.NullPointerException

    KdTree.size(KdTree.java:72)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:171)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1c(TestKdTree.java:1606)
    TestKdTree.main(TestKdTree.java:1935)

  * 100000 random distinct points in a 65536-by-65536 grid

    java.lang.NullPointerException

    KdTree.size(KdTree.java:72)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:171)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1c(TestKdTree.java:1607)
    TestKdTree.main(TestKdTree.java:1935)

==> FAILED

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid

    java.lang.NullPointerException

    KdTree.size(KdTree.java:72)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:171)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1d(TestKdTree.java:1614)
    TestKdTree.main(TestKdTree.java:1938)

  * 10 random general points in a 4-by-4 grid

    java.lang.NullPointerException

    KdTree.size(KdTree.java:72)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:171)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1d(TestKdTree.java:1615)
    TestKdTree.main(TestKdTree.java:1938)

  * 50 random general points in a 8-by-8 grid

    java.lang.NullPointerException

    KdTree.size(KdTree.java:72)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:171)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1d(TestKdTree.java:1616)
    TestKdTree.main(TestKdTree.java:1938)

  * 100000 random general points in a 16-by-16 grid

    java.lang.NullPointerException

    KdTree.size(KdTree.java:72)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:171)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1d(TestKdTree.java:1617)
    TestKdTree.main(TestKdTree.java:1938)

  * 100000 random general points in a 128-by-128 grid

    java.lang.NullPointerException

    KdTree.size(KdTree.java:72)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:171)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1d(TestKdTree.java:1618)
    TestKdTree.main(TestKdTree.java:1938)

  * 100000 random general points in a 1024-by-1024 grid

    java.lang.NullPointerException

    KdTree.size(KdTree.java:72)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:171)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:156)
    TestKdTree.test1d(TestKdTree.java:1619)
    TestKdTree.main(TestKdTree.java:1938)

==> FAILED

Test 2a: insert points from file; check contains() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 2d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 3a: insert points from file; check range() with random query rectangles
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 3b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
==> passed

Test 3c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
  * 10 random distinct points and random rectangles in a 4-by-4 grid
  * 20 random distinct points and random rectangles in a 8-by-8 grid
  * 100 random distinct points and random rectangles in a 16-by-16 grid
  * 1000 random distinct points and random rectangles in a 64-by-64 grid
  * 10000 random distinct points and random rectangles in a 128-by-128 grid
==> passed

Test 3d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
  * 5000 random general points and random rectangles in a 16-by-16 grid
  * 5000 random general points and random rectangles in a 128-by-128 grid
  * 5000 random general points and random rectangles in a 1024-by-1024 grid
==> passed

Test 3e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
==> passed

Test 4a: insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
  * input5.txt
  * input10.txt
==> passed

Test 4b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
==> passed

Test 5a: insert points from file; check nearest() with random query points
  * input0.txt

    java.lang.NullPointerException

    KdTree.nearest(KdTree.java:204)
    TestKdTree.checkNearest(TestKdTree.java:316)
    TestKdTree.checkNearest(TestKdTree.java:282)
    TestKdTree.test5a(TestKdTree.java:1759)
    TestKdTree.main(TestKdTree.java:1974)

  * input1.txt
  * input5.txt
  * input10.txt
==> FAILED

Test 5b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 30 random non-degenerate points in a 64-by-64 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 5c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
  * 15 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 100 random distinct points in a 32-by-32 grid
  * 10000 random distinct points in a 65536-by-65536 grid
==> passed

Test 5d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 6a: insert points from file; check nearest() with random query points
         and check traversal of kd-tree
  * input5.txt
    - student   nearest() = (0.7, 0.2)
    - reference nearest() = (0.7, 0.2)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.84, 0.04)
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A E B D C 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A E B C 
    - failed on trial 1 of 1000

  * input10.txt
    - student   nearest() = (0.499, 0.208)
    - reference nearest() = (0.499, 0.208)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.41, 0.09)
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B G J C F D 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B G J C D 
    - failed on trial 10 of 1000

==> FAILED

Test 6b: insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
    - student   nearest() = (0.25, 0.625)
    - reference nearest() = (0.25, 0.625)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.125, 0.875)
    - sequence of points inserted: 
      A  0.0 0.375
      B  0.25 0.625
      C  0.1875 0.125
      D  0.9375 0.3125
      E  0.6875 0.75
      F  0.75 0.5
      G  0.375 0.0
      H  0.5625 0.5625
      I  0.5 0.25
      J  0.0625 0.0625
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B E C D F H J 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B E C J D F H 
    - failed on trial 15 of 1000

  * 20 random non-degenerate points in a 32-by-32 grid
    - student   nearest() = (0.21875, 0.0625)
    - reference nearest() = (0.21875, 0.0625)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.34375, 0.125)
    - sequence of points inserted: 
      A  0.03125 0.75
      B  0.59375 0.53125
      C  0.625 0.4375
      D  0.21875 0.0625
      E  0.78125 0.65625
      F  0.71875 0.1875
      G  0.1875 0.59375
      H  0.8125 0.78125
      I  0.0625 0.15625
      J  0.40625 0.6875
      K  0.09375 0.40625
      L  0.84375 0.9375
      M  0.96875 0.875
      N  0.4375 0.375
      O  0.5 0.09375
      P  0.53125 0.21875
      Q  1.0 0.71875
      R  0.5625 0.25
      S  0.25 0.84375
      T  0.90625 1.0
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C D I K N O P R 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C D I K N O P 
    - failed on trial 2 of 1000

  * 30 random non-degenerate points in a 64-by-64 grid
    - student   nearest() = (0.8125, 0.46875)
    - reference nearest() = (0.8125, 0.46875)
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 7
    - number of reference entries = 6
    - failed on trial 1 of 1000

  * 50 random non-degenerate points in a 128-by-128 grid
    - student   nearest() = (0.71875, 0.2265625)
    - reference nearest() = (0.71875, 0.2265625)
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 6
    - number of reference entries = 5
    - failed on trial 1 of 1000

  * 1000 random non-degenerate points in a 2048-by-2048 grid
    - student   nearest() = (0.1796875, 0.27294921875)
    - reference nearest() = (0.1796875, 0.27294921875)
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 24
    - number of reference entries = 22
    - entry 20 of the two sequences are not equal
    - student   entry 20 = (0.07080078125, 0.3955078125)
    - reference entry 20 = (0.119140625, 0.23974609375)

    - failed on trial 5 of 1000

==> FAILED

Test 7: check with no points
  * size() and isEmpty()

    java.lang.NullPointerException

    KdTree.size(KdTree.java:72)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:171)
    TestKdTree.checkSizeAndIsEmpty(TestKdTree.java:151)
    TestKdTree.test7(TestKdTree.java:1830)
    TestKdTree.main(TestKdTree.java:1992)

  * contains()
  * nearest()

    java.lang.NullPointerException

    KdTree.nearest(KdTree.java:204)
    TestKdTree.checkNearest(TestKdTree.java:316)
    TestKdTree.checkNearest(TestKdTree.java:271)
    TestKdTree.test7(TestKdTree.java:1832)
    TestKdTree.main(TestKdTree.java:1992)

  * range()
==> FAILED

Test 8: check that the specified exception is thrown with null arguments
  * argument to insert() is null
  * argument to contains() is null
  * argument to range() is null
  * argument to nearest() is null
==> passed

Test 9a: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    KdTree.size(KdTree.java:72)
    TestKdTree.checkAll(TestKdTree.java:855)
    TestKdTree.test9a(TestKdTree.java:1857)
    TestKdTree.main(TestKdTree.java:1998)

    - sequence of operations was:
           st.size()

==> FAILED

Test 9b: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    KdTree.size(KdTree.java:72)
    TestKdTree.checkAll(TestKdTree.java:855)
    TestKdTree.test9b(TestKdTree.java:1869)
    TestKdTree.main(TestKdTree.java:2001)

    - sequence of operations was:
           st.size()

  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> FAILED

Test 9c: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)

    java.lang.NullPointerException

    KdTree.size(KdTree.java:72)
    TestKdTree.checkAll(TestKdTree.java:855)
    TestKdTree.test9c(TestKdTree.java:1880)
    TestKdTree.main(TestKdTree.java:2004)

    - sequence of operations was:
           st.size()

  * 20000 calls with general points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 141 of 20000
    - student   size() = 45
    - reference size() = 39

  * 20000 calls with general points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 195 of 20000
    - student   size() = 57
    - reference size() = 56

  * 20000 calls with general points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 5925 of 20000
    - student   size() = 1742
    - reference size() = 1741

  * 20000 calls with general points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> FAILED

Test 10: insert n random points into two different KdTree objects;
        check that repeated calls to size(), contains(), range(),
        and nearest() with the same arguments yield same results
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 100 random general points in a 128-by-128 grid
  * 1000 random general points in a 65536-by-65536 grid
==> passed


Total: 16/27 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes

================================================================



Analyzing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes

================================================================



Analyzing memory of PointSET
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a PointSET with n points (including Point2D and RectHV objects).
Maximum allowed memory is 96n + 200 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          240                264
=> passed        2          336                360
=> passed        5          624                648
=> passed       10         1104               1128
=> passed       25         2544               2568
=> passed      100         9744               9768
=> passed      400        38544              38568
=> passed      800        76944              76968
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 96.00 n + 144.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)

================================================================



Analyzing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1           88                160
=> passed        2          152                288
=> passed        5          344                672
=> passed       10          664               1312
=> passed       25         1624               3232
=> passed      100         6424              12832
=> passed      400        25624              51232
=> passed      800        51224             102432
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 64.00 n + 24.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 14 total tests.


Inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000    1430005         
=> passed   320000    1665243         
=> passed   640000    1503248         
=> passed  1280000    1266964         
==> 4/4 tests passed

Performing contains() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000     889618         
=> passed   320000     906560         
=> passed   640000     693968         
=> passed  1280000     640522         
==> 4/4 tests passed

Performing range() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       4477         
=> passed    20000       1515         
=> passed    40000        720         
==> 3/3 tests passed

Performing nearest() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       6061         
=> passed    20000       1664         
=> passed    40000        756         
==> 3/3 tests passed

Total: 14/14 tests passed!


================================================================



Timing KdTree
*-----------------------------------------------------------
Running 28 total tests.


Test 1a-d: Insert n points into a 2d tree. The table gives the average number of calls
           to methods in RectHV and Point per call to insert().

                                                                                                Point2D
               n      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=> passed   160000    2299498               0.0               1.0               1.0               0.0         
=> passed   320000    2365767               0.0               1.0               1.0               0.0         
=> passed   640000    2088311               0.0               1.0               1.0               0.0         
=> passed  1280000    1791178               0.0               1.0               1.0               0.0         
==> 4/4 tests passed


Test 2a-h: Perform contains() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to contains().

                                                                               Point2D
               n      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=> passed    10000    1246746               1.0               1.0               0.0         
=> passed    20000    1265785               1.0               1.0               0.0         
=> passed    40000    1197914               1.0               1.0               0.0         
=> passed    80000    1196019               1.0               1.0               0.0         
=> passed   160000    1040353               1.0               1.0               0.0         
=> passed   320000     935123               1.0               1.0               0.0         
=> passed   640000     889938               1.0               1.0               0.0         
=> passed  1280000     757248               1.0               1.0               0.0         
==> 8/8 tests passed


Test 3a-h: Perform range() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to range().

               n      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=> passed    10000     314505              62.3              31.1              50.1              12.1         
=> passed    20000     370174              65.1              32.6              53.3              16.2         
=> passed    40000     310770              78.6              39.3              63.1              14.1         
=> passed    80000     353737              81.3              40.7              65.2              14.9         
=> passed   160000     430910              85.0              42.5              70.9              20.4         
=> passed   320000     418724              80.5              40.2              65.2              15.7         
=> passed   640000     353746              86.6              43.3              70.7              19.2         
=> passed  1280000     255648              94.1              47.0              74.8              14.2         
==> 8/8 tests passed


Test 4a-h: Perform nearest() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               n      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=> passed    10000   503061                  89.8                   29.9                   122.1              96.1         
=> passed    20000   516772                  99.5                   33.2                   135.1             106.9         
=> passed    40000   449671                 117.4                   39.1                   160.1             123.3         
=> passed    80000   434823                 119.2                   39.7                   161.3             131.8         
=> passed   160000   381522                 129.3                   43.1                   175.9             138.5         
=> passed   320000   381948                 134.2                   44.7                   182.8             145.9         
=> passed   640000   294100                 140.4                   46.8                   190.3             153.2         
=> passed  1280000   247645                 156.8                   52.3                   212.6             166.1         
==> 8/8 tests passed



Total: 28/28 tests passed!


================================================================

